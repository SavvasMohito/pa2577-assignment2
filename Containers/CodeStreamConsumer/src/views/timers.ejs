<!DOCTYPE html>
<html>

<head>
	<title>Timers Statistics</title>
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<style>
		body {
			font-family: Arial, sans-serif;
			margin: 0;
			padding: 0;
			background-color: #f4f4f4;
		}

		.container {
			width: 1000px;
			margin: 0 auto;
			padding: 20px 40px 10px 40px;
			background-color: #fff;
			box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
			border-radius: 8px;
			margin-top: 20px;
			margin-bottom: 20px;
		}

		h1,
		h2 {
			color: #333;
		}

		p {
			color: #666;
		}

		table {
			width: 600px;
			border-collapse: collapse;
			margin: 20px 0;
		}

		table,
		th,
		td {
			border: 1px solid #ddd;
		}

		th,
		td {
			padding: 8px;
			text-align: left;
		}

		th {
			background-color: #f2f2f2;
		}

		tr:nth-child(even) {
			background-color: #f9f9f9;
		}

		.chart-container {
			width: 1000px;
			height: 500px;
			margin: 20px 0;
			text-align: center;
			padding-bottom: 50px;
		}

		.chart-container p {
			margin-top: 10px;
		}
	</style>
</head>

<body>
	<div class="container">
		<h1>Timers Statistics</h1>
		<p>Total Files: <%= statsTotal.totalFiles %>
		</p>

		<table>
			<thead>
				<tr>
					<th></th>
					<th>Total time</th>
					<th>Matching time</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>Average Time per File</td>
					<td>
						<%= (statsTotal.averageTime / 1000).toFixed(2) %> µs
					</td>
					<td>
						<%= (statsMatch.averageTime / 1000).toFixed(2) %> µs
					</td>
				</tr>
				<tr>
					<td>Average Time per Last 100 Files</td>
					<td>
						<%= (statsTotal.averageTimeLast100 / 1000).toFixed(2) %> µs
					</td>
					<td>
						<%= (statsMatch.averageTimeLast100 / 1000).toFixed(2) %> µs
					</td>
				</tr>
				<tr>
					<td>Average Time per Last 1000 Files</td>
					<td>
						<%= (statsTotal.averageTimeLast1000 / 1000).toFixed(2) %> µs
					</td>
					<td>
						<%= (statsMatch.averageTimeLast1000 / 1000).toFixed(2) %> µs
					</td>
				</tr>
			</tbody>
		</table>

		<p>Note: The time values of each file are normalized by dividing the time values by the number of rows</p>

		<h2>Charts</h2>
		<div class="chart-container">
			<canvas id="barChart"></canvas>
			<p>Bar chart showing the average total and match times per 1/100/1000 files</p>
		</div>

		<div class="chart-container">
			<canvas id="lineChart"></canvas>
			<p>Line chart showing the average total and match times of every 100 files</p>
		</div>
	</div>

	<%-'<script>'%>
		let statsTotal = <%-JSON.stringify(statsTotal)%>;
		let statsMatch = <%-JSON.stringify(statsMatch)%>;
	<%-'</script>'%>

	<script>
		const barCanvas = document.getElementById('barChart');
		const barCtx = barCanvas.getContext('2d');
		const barChart = new Chart(barCtx, {
			type: 'bar',
			data: {
				labels: ['Average Time per File', 'Average Time per Last 100 Files', 'Average Time per Last 1000 Files'],
				datasets: [{
					label: 'Total time (µs)',
					data: [
						(statsTotal.averageTime / 1000).toFixed(2),
						(statsTotal.averageTimeLast100 / 1000).toFixed(2),
						(statsTotal.averageTimeLast1000 / 1000).toFixed(2)
					],
					backgroundColor: 'rgba(75, 192, 192, 0.2)',
					borderColor: 'rgba(75, 192, 192, 1)',
					borderWidth: 1
				}, {
					label: 'Match time (µs)',
					data: [
						(statsMatch.averageTime / 1000).toFixed(2),
						(statsMatch.averageTimeLast100 / 1000).toFixed(2),
						(statsMatch.averageTimeLast1000 / 1000).toFixed(2)
					],
					backgroundColor: 'rgba(153, 102, 255, 0.2)',
					borderColor: 'rgba(153, 102, 255, 1)',
					borderWidth: 1
				}]
			},
			options: {
				scales: {
					y: {
						beginAtZero: true
					}
				}
			}
		});

		const lineCanvas = document.getElementById('lineChart');
		const lineCtx = lineCanvas.getContext('2d');
		const lineChart = new Chart(lineCtx, {
			type: 'line',
			data: {
				labels: Array.from({ length: statsTotal.averageTimePer100.length }, (_, i) => (i + 1) * 100),
				datasets: [{
					label: 'Total Time (µs)',
					data: statsTotal.averageTimePer100.map(time => (time / 1000).toFixed(2)),
					borderColor: 'rgba(75, 192, 192, 1)',
					backgroundColor: 'rgba(75, 192, 192, 0.2)',
					fill: false
				}, {
					label: 'Match Time (µs)',
					data: statsMatch.averageTimePer100.map(time => (time / 1000).toFixed(2)),
					borderColor: 'rgba(153, 102, 255, 1)',
					backgroundColor: 'rgba(153, 102, 255, 0.2)',
					fill: false
				}]
			},
			options: {
				scales: {
					y: {
						beginAtZero: true
					}
				}
			}
		});
	</script>
</body>

</html>